var documenterSearchIndex = {"docs":
[{"location":"api/#API-Reference","page":"API Reference","title":"API Reference","text":"","category":"section"},{"location":"api/#Types","page":"API Reference","title":"Types","text":"","category":"section"},{"location":"api/#SciMLLogging.AbstractVerbositySpecifier","page":"API Reference","title":"SciMLLogging.AbstractVerbositySpecifier","text":"AbstractVerbositySpecifier{T}     Base for types which specify which log messages are emitted at what level.\n\n\n\n\n\n","category":"type"},{"location":"api/#SciMLLogging.MessageLevel","page":"API Reference","title":"SciMLLogging.MessageLevel","text":"MessageLevel\n\nAbstract base type for all verbosity log levels in SciMLLogging.\n\nLog levels determine the severity/importance of messages. Concrete subtypes include:\n\nSilent: No output\nInfoLevel: Informational messages\nWarnLevel: Warning messages\nErrorLevel: Error messages\nCustomLevel(n): Custom log level with integer value n\n\n\n\n\n\n","category":"type"},{"location":"api/#SciMLLogging.Silent","page":"API Reference","title":"SciMLLogging.Silent","text":"Silent <: MessageLevel\n\nLog level that produces no output. When a message category is set to Silent(), no messages will be emitted for that category.\n\n\n\n\n\n","category":"type"},{"location":"api/#SciMLLogging.InfoLevel","page":"API Reference","title":"SciMLLogging.InfoLevel","text":"InfoLevel <: MessageLevel\n\nInformational log level. Messages at this level provide general information about the progress or state of the computation.\n\n\n\n\n\n","category":"type"},{"location":"api/#SciMLLogging.WarnLevel","page":"API Reference","title":"SciMLLogging.WarnLevel","text":"WarnLevel <: MessageLevel\n\nWarning log level. Messages at this level indicate potential issues or situations that may require attention but don't prevent execution.\n\n\n\n\n\n","category":"type"},{"location":"api/#SciMLLogging.ErrorLevel","page":"API Reference","title":"SciMLLogging.ErrorLevel","text":"ErrorLevel <: MessageLevel\n\nError log level. Messages at this level indicate serious problems or failures in the computation.\n\n\n\n\n\n","category":"type"},{"location":"api/#SciMLLogging.CustomLevel","page":"API Reference","title":"SciMLLogging.CustomLevel","text":"CustomLevel(n::Int) <: MessageLevel\n\nCustom log level with integer value n. This allows creating custom severity levels beyond the standard Info/Warn/Error hierarchy.\n\nHigher integer values typically indicate higher priority/severity.\n\nExample\n\ndebug_level = CustomLevel(-1000)  # Very low priority debug messages\ncritical_level = CustomLevel(1000)  # Very high priority critical messages\n\n\n\n\n\n","category":"type"},{"location":"api/#SciMLLogging.VerbosityPreset","page":"API Reference","title":"SciMLLogging.VerbosityPreset","text":"VerbosityPreset\n\nAbstract base type for predefined verbosity configurations.\n\nPresets provide convenient ways for users to configure verbosity without needing to specify individual message categories. Concrete subtypes include:\n\nNone: Disable all verbosity\nAll: Enable all message categories\nMinimal: Only essential messages\nStandard: Balanced verbosity for typical use\nDetailed: Comprehensive verbosity for debugging\n\n\n\n\n\n","category":"type"},{"location":"api/#SciMLLogging.None","page":"API Reference","title":"SciMLLogging.None","text":"None <: VerbosityPreset\n\nPreset that disables all verbosity. When used, typically results in a verbosity specifier with T=false, providing zero runtime overhead.\n\n\n\n\n\n","category":"type"},{"location":"api/#SciMLLogging.All","page":"API Reference","title":"SciMLLogging.All","text":"All <: VerbosityPreset\n\nPreset that enables maximum verbosity. All message categories are typically set to show informational messages or their appropriate levels.\n\n\n\n\n\n","category":"type"},{"location":"api/#SciMLLogging.Minimal","page":"API Reference","title":"SciMLLogging.Minimal","text":"Minimal <: VerbosityPreset\n\nPreset that shows only essential messages. Typically includes only warnings, errors, and critical status information while suppressing routine progress and debugging messages.\n\n\n\n\n\n","category":"type"},{"location":"api/#SciMLLogging.Standard","page":"API Reference","title":"SciMLLogging.Standard","text":"Standard <: VerbosityPreset\n\nPreset that provides balanced verbosity suitable for typical usage. Shows important progress and status information without overwhelming the user with details.\n\n\n\n\n\n","category":"type"},{"location":"api/#SciMLLogging.Detailed","page":"API Reference","title":"SciMLLogging.Detailed","text":"Detailed <: VerbosityPreset\n\nPreset that provides comprehensive verbosity for debugging and detailed analysis. Shows most or all available message categories to help with troubleshooting and understanding program behavior.\n\n\n\n\n\n","category":"type"},{"location":"api/#Macros","page":"API Reference","title":"Macros","text":"","category":"section"},{"location":"api/#SciMLLogging.@SciMLMessage","page":"API Reference","title":"SciMLLogging.@SciMLMessage","text":"A macro that emits a log message based on the log level specified in the option of the AbstractVerbositySpecifier supplied.\n\nf_or_message may be a message String, or a 0-argument function that returns a String.\n\nUsage\n\nTo emit a simple string, @SciMLMessage(\"message\", verbosity, :option) will emit a log message with the LogLevel specified in verbosity for the given option.\n\n@SciMLMessage can also be used to emit a log message coming from the evaluation of a 0-argument function. This function is resolved in the environment of the macro call. Therefore it can use variables from the surrounding environment. This may be useful if the log message writer wishes to carry out some calculations using existing variables and use them in the log message.\n\n# String message\n@SciMLMessage(\"Hello\", verbose, :test1)\n\n# Function for lazy evaluation\nx = 10\ny = 20\n\n@SciMLMessage(verbosity, :option) do\n    z = x + y\n    \"Sum: $z\"\nend\n\n\n\n\n\n","category":"macro"},{"location":"api/#Functions","page":"API Reference","title":"Functions","text":"","category":"section"},{"location":"api/#SciMLLogging.verbosity_to_int","page":"API Reference","title":"SciMLLogging.verbosity_to_int","text":"    `verbosity_to_int(verb::MessageLevel)`\nTakes a `MessageLevel` and gives a corresponding integer value.\nVerbosity settings that use integers or enums that hold integers are relatively common.\nThis provides an interface so that these packages can be used with SciMLVerbosity. Each of the basic verbosity levels\nare mapped to an integer.\n\n- Silent() => 0\n- InfoLevel() => 1\n- WarnLevel() => 2\n- ErrorLevel() => 3\n- CustomLevel(i) => i\n\n\n\n\n\n","category":"function"},{"location":"api/#SciMLLogging.verbosity_to_bool","page":"API Reference","title":"SciMLLogging.verbosity_to_bool","text":"    `verbosity_to_bool(verb::MessageLevel)`\nTakes a `MessageLevel` and gives a corresponding boolean value.\nVerbosity settings that use booleans are relatively common.\nThis provides an interface so that these packages can be used with SciMLVerbosity.\nIf the verbosity is `Silent`, then `false` is returned. Otherwise, `true` is returned.\n\n\n\n\n\n","category":"function"},{"location":"api/#SciMLLogging.SciMLLogger","page":"API Reference","title":"SciMLLogging.SciMLLogger","text":"SciMLLogger(; kwargs...)\n\nCreate a logger that routes messages to REPL and/or files based on log level.\n\nKeyword Arguments\n\ninfo_repl = true: Show info messages in REPL\nwarn_repl = true: Show warnings in REPL\nerror_repl = true: Show errors in REPL\ninfo_file = nothing: File path for info messages\nwarn_file = nothing: File path for warnings\nerror_file = nothing: File path for errors\n\n\n\n\n\n","category":"function"},{"location":"api/#SciMLLogging.set_logging_backend","page":"API Reference","title":"SciMLLogging.set_logging_backend","text":"set_logging_backend(backend::String)\n\nSet the logging backend preference. Valid options are:\n\n\"logging\": Use Julia's standard Logging system (default)\n\"core\": Use Core.println for simple output\n\nNote: You must restart Julia for this preference change to take effect.\n\n\n\n\n\n","category":"function"},{"location":"api/#SciMLLogging.get_logging_backend","page":"API Reference","title":"SciMLLogging.get_logging_backend","text":"get_logging_backend() -> String\n\nGet the current logging backend preference.\n\n\n\n\n\n","category":"function"},{"location":"api/#Index","page":"API Reference","title":"Index","text":"","category":"section"},{"location":"api/","page":"API Reference","title":"API Reference","text":"","category":"page"},{"location":"developer_tutorial/#Developer-Tutorial:-Adding-SciMLLogging-to-Your-Package","page":"Developer Guide","title":"Developer Tutorial: Adding SciMLLogging to Your Package","text":"","category":"section"},{"location":"developer_tutorial/","page":"Developer Guide","title":"Developer Guide","text":"This tutorial is for Julia package developers who want to integrate SciMLLogging.jl into their packages to provide users with fine-grained verbosity control.","category":"page"},{"location":"developer_tutorial/#Overview","page":"Developer Guide","title":"Overview","text":"","category":"section"},{"location":"developer_tutorial/","page":"Developer Guide","title":"Developer Guide","text":"SciMLLogging.jl provides three main components for package developers:","category":"page"},{"location":"developer_tutorial/","page":"Developer Guide","title":"Developer Guide","text":"AbstractVerbositySpecifier{T} - Base type for creating custom verbosity types\n@SciMLMessage - Macro for emitting conditional log messages\nVerbosity levels - Predefined log levels (Silent, InfoLevel, WarnLevel, ErrorLevel, CustomLevel(n))","category":"page"},{"location":"developer_tutorial/#Step-1:-Design-Your-Verbosity-Interface","page":"Developer Guide","title":"Step 1: Design Your Verbosity Interface","text":"","category":"section"},{"location":"developer_tutorial/","page":"Developer Guide","title":"Developer Guide","text":"First, decide what aspects of your package should be controllable by users. For example, a solver might have:","category":"page"},{"location":"developer_tutorial/","page":"Developer Guide","title":"Developer Guide","text":"Initialization messages\nIteration progress\nConvergence information\nWarning messages","category":"page"},{"location":"developer_tutorial/#Step-2:-Create-Your-Verbosity-Type","page":"Developer Guide","title":"Step 2: Create Your Verbosity Type","text":"","category":"section"},{"location":"developer_tutorial/","page":"Developer Guide","title":"Developer Guide","text":"Define a struct that inherits from AbstractVerbositySpecifier{T}:","category":"page"},{"location":"developer_tutorial/","page":"Developer Guide","title":"Developer Guide","text":"using SciMLLogging\n\nstruct MySolverVerbosity{T} <: AbstractVerbositySpecifier{T}\n    initialization::MessageLevel\n    iterations::MessageLevel\n    convergence::MessageLevel\n    warnings::MessageLevel\n\n    function MySolverVerbosity{T}(;\n        initialization = InfoLevel(),\n        iterations = Silent(),\n        convergence = InfoLevel(),\n        warnings = WarnLevel()\n    ) where T\n        new{T}(initialization, iterations, convergence, warnings)\n    end\nend","category":"page"},{"location":"developer_tutorial/","page":"Developer Guide","title":"Developer Guide","text":"Key Design Principles:","category":"page"},{"location":"developer_tutorial/","page":"Developer Guide","title":"Developer Guide","text":"The type parameter T controls whether any logging is enabled or not: T=true enables messages, T=false disables them\nEach field represents a category of messages your package can emit\nProvide sensible defaults that work for most users\nUse keyword arguments for flexibility","category":"page"},{"location":"developer_tutorial/#Step-3:-Add-Convenience-Constructors","page":"Developer Guide","title":"Step 3: Add Convenience Constructors","text":"","category":"section"},{"location":"developer_tutorial/","page":"Developer Guide","title":"Developer Guide","text":"Make it easy for users to create verbosity instances:","category":"page"},{"location":"developer_tutorial/","page":"Developer Guide","title":"Developer Guide","text":"# Default enabled verbosity\nMySolverVerbosity() = MySolverVerbosity{true}()\n\n# Boolean constructor\nMySolverVerbosity(enabled::Bool) = enabled ? MySolverVerbosity{true}() : MySolverVerbosity{false}()\n\n# Preset-based constructor (optional)\nfunction MySolverVerbosity(preset::VerbosityPreset)\n    if preset isa None\n        MySolverVerbosity{false}()\n    elseif preset isa All\n        MySolverVerbosity{true}(\n            initialization = InfoLevel(),\n            iterations = InfoLevel(),\n            convergence = InfoLevel(),\n            warnings = WarnLevel()\n        )\n    elseif preset isa Minimal\n        MySolverVerbosity{true}(\n            initialization = Silent(),\n            iterations = Silent(),\n            convergence = ErrorLevel(),\n            warnings = ErrorLevel()\n        )\n    else\n        MySolverVerbosity{true}()  # Default\n    end\nend","category":"page"},{"location":"developer_tutorial/#Step-4:-Integrate-Messages-Into-Your-Code","page":"Developer Guide","title":"Step 4: Integrate Messages Into Your Code","text":"","category":"section"},{"location":"developer_tutorial/","page":"Developer Guide","title":"Developer Guide","text":"Use @SciMLMessage throughout your package code:","category":"page"},{"location":"developer_tutorial/","page":"Developer Guide","title":"Developer Guide","text":"function my_solve(problem, verbose::MySolverVerbosity)\n    @SciMLMessage(\"Initializing solver for $(typeof(problem))\", verbose, :initialization)\n\n    # Setup code here...\n\n    for iteration in 1:maxiters\n        # Solver iteration...\n\n        @SciMLMessage(verbose, :iterations) do\n            \"Iteration $iteration: residual = $(compute_residual())\"\n        end\n\n        if converged\n            @SciMLMessage(\"Converged after $iteration iterations\", verbose, :convergence)\n            return solution\n        end\n\n        if should_warn_about_something()\n            @SciMLMessage(\"Convergence is slow, consider adjusting parameters\", verbose, :warnings)\n        end\n    end\n\n    @SciMLMessage(\"Failed to converge after $maxiters iterations\", verbose, :convergence)\n    return nothing\nend","category":"page"},{"location":"developer_tutorial/","page":"Developer Guide","title":"Developer Guide","text":"Message Types:","category":"page"},{"location":"developer_tutorial/","page":"Developer Guide","title":"Developer Guide","text":"String messages: @SciMLMessage(\"Fixed message\", verbose, :category)\nFunction messages: @SciMLMessage(verbose, :category) do; \"Dynamic message\"; end","category":"page"},{"location":"developer_tutorial/","page":"Developer Guide","title":"Developer Guide","text":"Use function messages when:","category":"page"},{"location":"developer_tutorial/","page":"Developer Guide","title":"Developer Guide","text":"Message generation is expensive\nMessage includes computed values\nYou want lazy evaluation","category":"page"},{"location":"developer_tutorial/#Step-5:-Export-Your-Verbosity-Type","page":"Developer Guide","title":"Step 5: Export Your Verbosity Type","text":"","category":"section"},{"location":"developer_tutorial/","page":"Developer Guide","title":"Developer Guide","text":"In your main module file:","category":"page"},{"location":"developer_tutorial/","page":"Developer Guide","title":"Developer Guide","text":"module MySolver\n\nusing SciMLLogging\nimport SciMLLogging: AbstractVerbositySpecifier\n\n# Your verbosity type definition...\ninclude(\"verbosity.jl\")\n\n# Your solver code...\ninclude(\"solver.jl\")\n\n# Export the verbosity type\nexport MySolverVerbosity\n\nend","category":"page"},{"location":"developer_tutorial/#Step-6:-Document-for-Users","page":"Developer Guide","title":"Step 6: Document for Users","text":"","category":"section"},{"location":"developer_tutorial/","page":"Developer Guide","title":"Developer Guide","text":"Provide clear documentation for your users:","category":"page"},{"location":"developer_tutorial/","page":"Developer Guide","title":"Developer Guide","text":"\"\"\"\n    MySolverVerbosity{T}(; kwargs...)\n\nControls verbosity output from MySolver functions.\n\n# Keyword Arguments\n- `initialization = InfoLevel()`: Messages about solver setup\n- `iterations = Silent()`: Per-iteration progress messages\n- `convergence = InfoLevel()`: Convergence/failure notifications\n- `warnings = WarnLevel()`: Warning messages during solving\n\n# Constructors\n- `MySolverVerbosity()`: Default enabled verbosity\n- `MySolverVerbosity(false)`: Disabled (zero overhead)\n- `MySolverVerbosity(All())`: Enable all message categories\n- `MySolverVerbosity(Minimal())`: Only errors and convergence\n\n# Example","category":"page"},{"location":"developer_tutorial/","page":"Developer Guide","title":"Developer Guide","text":"julia","category":"page"},{"location":"developer_tutorial/#Default-verbosity","page":"Developer Guide","title":"Default verbosity","text":"","category":"section"},{"location":"developer_tutorial/","page":"Developer Guide","title":"Developer Guide","text":"verbose = MySolverVerbosity()","category":"page"},{"location":"developer_tutorial/#Custom-verbosity-show-everything-except-iterations","page":"Developer Guide","title":"Custom verbosity - show everything except iterations","text":"","category":"section"},{"location":"developer_tutorial/","page":"Developer Guide","title":"Developer Guide","text":"verbose = MySolverVerbosity(iterations = Silent())","category":"page"},{"location":"developer_tutorial/#Silent-mode-(no-runtime-overhead)","page":"Developer Guide","title":"Silent mode (no runtime overhead)","text":"","category":"section"},{"location":"developer_tutorial/","page":"Developer Guide","title":"Developer Guide","text":"verbose = MySolverVerbosity(false)","category":"page"},{"location":"developer_tutorial/","page":"Developer Guide","title":"Developer Guide","text":"\"\"\"","category":"page"},{"location":"developer_tutorial/#Step-7:-Add-Tests","page":"Developer Guide","title":"Step 7: Add Tests","text":"","category":"section"},{"location":"developer_tutorial/","page":"Developer Guide","title":"Developer Guide","text":"Test your verbosity implementation:","category":"page"},{"location":"developer_tutorial/","page":"Developer Guide","title":"Developer Guide","text":"using Test\nusing MySolver\nusing Logging\n\n@testset \"Verbosity Tests\" begin\n    # Test message emission\n    verbose = MySolverVerbosity()\n\n    @test_logs (:info, r\"Initializing solver\") begin\n        my_solve(test_problem, verbose)\n    end\n\n    # Test silent mode produces no output\n    silent = MySolverVerbosity(false)\n    @test_logs min_level=Logging.Debug begin\n        my_solve(test_problem, silent)\n    end\nend","category":"page"},{"location":"developer_tutorial/#Best-Practices","page":"Developer Guide","title":"Best Practices","text":"","category":"section"},{"location":"developer_tutorial/#Performance","page":"Developer Guide","title":"Performance","text":"","category":"section"},{"location":"developer_tutorial/","page":"Developer Guide","title":"Developer Guide","text":"Always use the type parameter T to control whether logging is enabled or not\nUse function-based messages for expensive computations\nConsider message frequency - don't spam users with too many messages","category":"page"},{"location":"developer_tutorial/#User-Experience","page":"Developer Guide","title":"User Experience","text":"","category":"section"},{"location":"developer_tutorial/","page":"Developer Guide","title":"Developer Guide","text":"Provide sensible defaults that work for most users\nUse descriptive category names (:initialization not :init)\nGroup related messages into logical categories\nDocument what each category controls","category":"page"},{"location":"developer_tutorial/#Message-Content","page":"Developer Guide","title":"Message Content","text":"","category":"section"},{"location":"developer_tutorial/","page":"Developer Guide","title":"Developer Guide","text":"Include relevant context (iteration numbers, values, etc.)\nUse consistent formatting across your package\nMake messages actionable when possible\nAvoid overly technical jargon in user-facing messages","category":"page"},{"location":"developer_tutorial/#Integration","page":"Developer Guide","title":"Integration","text":"","category":"section"},{"location":"developer_tutorial/","page":"Developer Guide","title":"Developer Guide","text":"Accept verbosity parameters in your main API functions\nConsider making verbosity optional with sensible defaults\nThread verbosity through your call stack as needed","category":"page"},{"location":"developer_tutorial/#Advanced:-Custom-Log-Levels","page":"Developer Guide","title":"Advanced: Custom Log Levels","text":"","category":"section"},{"location":"developer_tutorial/","page":"Developer Guide","title":"Developer Guide","text":"For specialized needs, you can create custom log levels:","category":"page"},{"location":"developer_tutorial/","page":"Developer Guide","title":"Developer Guide","text":"struct MySolverVerbosity{T} <: AbstractVerbositySpecifier{T}\n    debug::MessageLevel\n    # ... other fields\n\n    function MySolverVerbosity{T}(;\n        debug = CustomLevel(-1000),  # Custom level below Info\n        # ... other defaults\n    ) where T\n        new{T}(debug, ...)\n    end\nend","category":"page"},{"location":"developer_tutorial/#Complete-Example","page":"Developer Guide","title":"Complete Example","text":"","category":"section"},{"location":"developer_tutorial/","page":"Developer Guide","title":"Developer Guide","text":"Here's a complete minimal example:","category":"page"},{"location":"developer_tutorial/","page":"Developer Guide","title":"Developer Guide","text":"module ExampleSolver\n\nusing SciMLLogging\nimport SciMLLogging: AbstractVerbositySpecifier\n\nstruct ExampleVerbosity{T} <: AbstractVerbositySpecifier{T}\n    progress::MessageLevel\n\n    ExampleVerbosity{T}(progress = InfoLevel()) where T = new{T}(progress)\nend\n\nExampleVerbosity() = ExampleVerbosity{true}()\nExampleVerbosity(enabled::Bool) = enabled ? ExampleVerbosity{true}() : ExampleVerbosity{false}()\n\nfunction solve_example(n::Int, verbose::ExampleVerbosity)\n    result = 0\n    for i in 1:n\n        result += i\n        @SciMLMessage(\"Step $i: sum = $result\", verbose, :progress)\n    end\n    return result\nend\n\nexport ExampleVerbosity, solve_example\n\nend","category":"page"},{"location":"developer_tutorial/","page":"Developer Guide","title":"Developer Guide","text":"This example shows the minimal structure needed to integrate SciMLLogging into a package.","category":"page"},{"location":"user_tutorial/#User-Tutorial:-Configuring-Package-Verbosity","page":"User Guide","title":"User Tutorial: Configuring Package Verbosity","text":"","category":"section"},{"location":"user_tutorial/","page":"User Guide","title":"User Guide","text":"This tutorial is for end users who want to control the verbosity of packages that use SciMLLogging.jl. If you're using packages from the SciML ecosystem or other packages that support SciMLLogging. ","category":"page"},{"location":"user_tutorial/","page":"User Guide","title":"User Guide","text":"Each package will have it's own implementation of the AbstractVerbositySpecifier type, which defines the available verbosity options. This guide is meant to be a general guide to the specifics of SciMLLogging.jl, as well as give some examples of how the system is typically implemented. For details on the specific verbosity settings of a package, refer to the package's documentation.","category":"page"},{"location":"user_tutorial/#Understanding-Verbosity-Specifiers","page":"User Guide","title":"Understanding Verbosity Specifiers","text":"","category":"section"},{"location":"user_tutorial/","page":"User Guide","title":"User Guide","text":"Before diving into usage, let's understand what a VerbositySpecifier looks like with a simple example. Typically, the SolverVerbosity type, would be implemented in a package like so:","category":"page"},{"location":"user_tutorial/","page":"User Guide","title":"User Guide","text":"using SciMLLogging\n\n# Example VerbositySpecifier from a hypothetical solver package\nstruct SolverVerbosity{T} <: AbstractVerbositySpecifier{T}\n    initialization::MessageLevel    # Controls startup messages\n    iterations::MessageLevel        # Controls per-iteration output\n    convergence::MessageLevel       # Controls convergence messages\n    warnings::MessageLevel          # Controls warning messages\nend","category":"page"},{"location":"user_tutorial/","page":"User Guide","title":"User Guide","text":"What this means:","category":"page"},{"location":"user_tutorial/","page":"User Guide","title":"User Guide","text":"T parameter: Controls whether logging is enabled (T=true) or disabled (T=false)\nEach field: Represents a category of messages the package can emit\nMessageLevel values: Can be Silent(), InfoLevel(), WarnLevel(), ErrorLevel(), or CustomLevel(n) for custom levels","category":"page"},{"location":"user_tutorial/","page":"User Guide","title":"User Guide","text":"When T=false, all logging is disabled with zero runtime overhead. When T=true, each category can be individually controlled.","category":"page"},{"location":"user_tutorial/#Quick-Start","page":"User Guide","title":"Quick Start","text":"","category":"section"},{"location":"user_tutorial/","page":"User Guide","title":"User Guide","text":"Most packages that use SciMLLogging provide simple ways to control their verbosity:","category":"page"},{"location":"user_tutorial/","page":"User Guide","title":"User Guide","text":"using SomePackage  # A package that uses SciMLLogging\n\n# Default verbosity (usually shows important messages)\nresult = solve_problem(problem)\n\n# Silent mode (no output)\nresult = solve_problem(problem, verbose = None())\n\n# Verbose mode (show more details)\nresult = solve_problem(problem, verbose = Detailed())","category":"page"},{"location":"user_tutorial/#Understanding-Verbosity-Levels","page":"User Guide","title":"Understanding Verbosity Levels","text":"","category":"section"},{"location":"user_tutorial/","page":"User Guide","title":"User Guide","text":"SciMLLogging packages typically categorize their messages into different types:","category":"page"},{"location":"user_tutorial/","page":"User Guide","title":"User Guide","text":"Silent: No output at all\nInfoLevel: General informational messages\nWarnLevel: Warning messages about potential issues\nErrorLevel: Error messages (usually still shown even in quiet modes)","category":"page"},{"location":"user_tutorial/#Common-Usage-Patterns","page":"User Guide","title":"Common Usage Patterns","text":"","category":"section"},{"location":"user_tutorial/#Using-Verbosity-Presets","page":"User Guide","title":"Using Verbosity Presets","text":"","category":"section"},{"location":"user_tutorial/","page":"User Guide","title":"User Guide","text":"Many packages provide preset verbosity levels:","category":"page"},{"location":"user_tutorial/","page":"User Guide","title":"User Guide","text":"using SciMLLogging  # To access preset types\n\n# Minimal output - only critical messages\nresult = solve(problem, verbose = Minimal())\n\n# Maximum output - show everything\nresult = solve(problem, verbose = All())\n\n# No output at all\nresult = solve(problem, verbose = None())","category":"page"},{"location":"user_tutorial/#Example-of-a-typical-AbstractVerbositySpecifier","page":"User Guide","title":"Example of a typical AbstractVerbositySpecifier","text":"","category":"section"},{"location":"user_tutorial/","page":"User Guide","title":"User Guide","text":"Here's an example of how one might use a packages AbstractVerbositySpecifier implementation to control the output.","category":"page"},{"location":"user_tutorial/","page":"User Guide","title":"User Guide","text":"# Example: Customizing a solver's verbosity\nverbose_settings = SolverVerbosity{true}(\n    initialization = InfoLevel(),      # Show startup messages\n    iterations = Silent(),        # Don't show each iteration\n    convergence = InfoLevel(),         # Show when it converges\n    warnings = WarnLevel()            # Show warnings\n)\n\nresult = solve(problem, verbose = verbose_settings)","category":"page"},{"location":"user_tutorial/","page":"User Guide","title":"User Guide","text":"Explanation of the example above:","category":"page"},{"location":"user_tutorial/","page":"User Guide","title":"User Guide","text":"SolverVerbosity{true}() creates an enabled verbosity specifier\ninitialization = InfoLevel() means startup messages will be shown as informational logs\niterations = Silent() means iteration progress won't be shown at all\nconvergence = InfoLevel() means convergence messages will be shown as informational logs\nwarnings = WarnLevel() means warnings will be shown as warning-level logs","category":"page"},{"location":"user_tutorial/#Working-with-Different-Output-Backends","page":"User Guide","title":"Working with Different Output Backends","text":"","category":"section"},{"location":"user_tutorial/#Standard-Julia-Logging","page":"User Guide","title":"Standard Julia Logging","text":"","category":"section"},{"location":"user_tutorial/","page":"User Guide","title":"User Guide","text":"By default, messages go through Julia's standard logging system. You can control this with the logging level:","category":"page"},{"location":"user_tutorial/","page":"User Guide","title":"User Guide","text":"using Logging\n\n# Only show warnings and errors\nwith_logger(ConsoleLogger(stderr, Logging.Warn)) do\n    result = solve_problem(problem, verbose = true)\nend\n\n# Show everything including debug messages\nwith_logger(ConsoleLogger(stderr, Logging.Debug)) do\n    result = solve_problem(problem, verbose = true)\nend","category":"page"},{"location":"user_tutorial/#Simple-Console-Output","page":"User Guide","title":"Simple Console Output","text":"","category":"section"},{"location":"user_tutorial/","page":"User Guide","title":"User Guide","text":"Some packages may be configured to use simple console output instead of the logging system:","category":"page"},{"location":"user_tutorial/","page":"User Guide","title":"User Guide","text":"using SciMLLogging\n\n# Switch to simple Core.println output (if supported by the package)\nSciMLLogging.set_logging_backend(\"core\")\n\n# Switch back to standard logging\nSciMLLogging.set_logging_backend(\"logging\")","category":"page"},{"location":"user_tutorial/","page":"User Guide","title":"User Guide","text":"Note: You need to restart Julia after changing the backend preference.","category":"page"},{"location":"user_tutorial/#Redirecting-Output-to-Files","page":"User Guide","title":"Redirecting Output to Files","text":"","category":"section"},{"location":"user_tutorial/","page":"User Guide","title":"User Guide","text":"You can redirect verbose output to files using Julia's logging system:","category":"page"},{"location":"user_tutorial/","page":"User Guide","title":"User Guide","text":"using Logging\n\n# Save all output to a file\nopen(\"solver_output.log\", \"w\") do io\n    with_logger(SimpleLogger(io)) do\n        result = solve_problem(problem, verbose = true)\n    end\nend\n\n# Or use the built-in SciMLLogger for more control\nusing SciMLLogging\n\nlogger = SciMLLogger(\n    info_repl = true,           # Show info in REPL\n    warn_repl = true,           # Show warnings in REPL\n    error_repl = true,          # Show errors in REPL\n    info_file = \"info.log\",     # Save info messages to file\n    warn_file = \"warnings.log\", # Save warnings to file\n    error_file = \"errors.log\"   # Save errors to file\n)\n\nwith_logger(logger) do\n    result = solve_problem(problem, verbose = true)\nend","category":"page"},{"location":"user_tutorial/#Common-Scenarios","page":"User Guide","title":"Common Scenarios","text":"","category":"section"},{"location":"user_tutorial/#Running-Experiments-Quietly","page":"User Guide","title":"Running Experiments Quietly","text":"","category":"section"},{"location":"user_tutorial/","page":"User Guide","title":"User Guide","text":"When running many experiments, you might want minimal output:","category":"page"},{"location":"user_tutorial/","page":"User Guide","title":"User Guide","text":"results = []\nfor param in parameter_sweep\n    # Only show errors and critical information\n    result = solve_problem(param, verbose = Minimal())\n    push!(results, result)\nend","category":"page"},{"location":"user_tutorial/#Debugging-Issues","page":"User Guide","title":"Debugging Issues","text":"","category":"section"},{"location":"user_tutorial/","page":"User Guide","title":"User Guide","text":"When troubleshooting problems, enable maximum verbosity:","category":"page"},{"location":"user_tutorial/","page":"User Guide","title":"User Guide","text":"# Show everything to understand what's happening\nresult = solve_problem(problematic_case, verbose = All())\n\n# Or create custom settings to focus on specific aspects\ndebug_verbose = SolverVerbosity{true}(\n    initialization = InfoLevel(),\n    iterations = InfoLevel(),        # Now show iterations for debugging\n    convergence = InfoLevel(),\n    warnings = WarnLevel()\n)\n\nresult = solve_problem(problematic_case, verbose = debug_verbose)","category":"page"},{"location":"user_tutorial/#Production-Runs","page":"User Guide","title":"Production Runs","text":"","category":"section"},{"location":"user_tutorial/","page":"User Guide","title":"User Guide","text":"For production environments, you might want only warnings and errors:","category":"page"},{"location":"user_tutorial/","page":"User Guide","title":"User Guide","text":"# Custom settings for production\nproduction_verbose = SolverVerbosity{true}(\n    initialization = Silent(),   # Don't show routine startup\n    iterations = Silent(),       # Don't show progress\n    convergence = Silent(),      # Don't show normal completion\n    warnings = WarnLevel()           # But do show problems\n)\n\nresult = solve_problem(problem, verbose = production_verbose)","category":"page"},{"location":"user_tutorial/#Package-Specific-Examples","page":"User Guide","title":"Package-Specific Examples","text":"","category":"section"},{"location":"user_tutorial/#Solver-Packages","page":"User Guide","title":"Solver Packages","text":"","category":"section"},{"location":"user_tutorial/","page":"User Guide","title":"User Guide","text":"Typical solver verbosity options:","category":"page"},{"location":"user_tutorial/","page":"User Guide","title":"User Guide","text":"# Show convergence info but not each iteration\nsolver_verbose = SolverVerbosity{true}(\n    initialization = InfoLevel(),\n    iterations = Silent(),\n    convergence = InfoLevel(),\n    warnings = WarnLevel()\n)\n\nsolution = solve(problem, solver_verbose)","category":"page"},{"location":"user_tutorial/#Optimization-Packages","page":"User Guide","title":"Optimization Packages","text":"","category":"section"},{"location":"user_tutorial/","page":"User Guide","title":"User Guide","text":"Optimization packages might have different categories:","category":"page"},{"location":"user_tutorial/","page":"User Guide","title":"User Guide","text":"# Focus on optimization progress\nopt_verbose = OptimizerVerbosity{true}(\n    initialization = Silent(),\n    objective = InfoLevel(),      # Show objective function values\n    constraints = WarnLevel(),    # Show constraint violations\n    convergence = InfoLevel()\n)\n\nresult = optimize(objective, constraints, opt_verbose)","category":"page"},{"location":"user_tutorial/#Tips-and-Best-Practices","page":"User Guide","title":"Tips and Best Practices","text":"","category":"section"},{"location":"user_tutorial/#Finding-Available-Options","page":"User Guide","title":"Finding Available Options","text":"","category":"section"},{"location":"user_tutorial/","page":"User Guide","title":"User Guide","text":"To see what verbosity options a package provides:","category":"page"},{"location":"user_tutorial/","page":"User Guide","title":"User Guide","text":"# Check the documentation\n?SolverVerbosity\n\n# Look at the default constructor\nSolverVerbosity()\n\n# Many packages document their verbosity categories","category":"page"},{"location":"user_tutorial/#Testing-Your-Settings","page":"User Guide","title":"Testing Your Settings","text":"","category":"section"},{"location":"user_tutorial/","page":"User Guide","title":"User Guide","text":"Before long runs, test your verbosity settings on a small example:","category":"page"},{"location":"user_tutorial/","page":"User Guide","title":"User Guide","text":"# Test with a quick example first\ntest_result = solve_problem(small_test_case, verbose_settings)\n\n# Then use the same settings for the full problem\nresult = solve_problem(full_problem, verbose_settings)","category":"page"},{"location":"user_tutorial/#Performance-Considerations","page":"User Guide","title":"Performance Considerations","text":"","category":"section"},{"location":"user_tutorial/","page":"User Guide","title":"User Guide","text":"Using verbose = false or None() typically has zero runtime overhead\nCustom verbosity settings have minimal overhead\nFile logging might slow down execution if there are many messages","category":"page"},{"location":"user_tutorial/#Combining-with-Julia's-Built-in-Logging","page":"User Guide","title":"Combining with Julia's Built-in Logging","text":"","category":"section"},{"location":"user_tutorial/","page":"User Guide","title":"User Guide","text":"You can combine package verbosity with Julia's logging filters:","category":"page"},{"location":"user_tutorial/","page":"User Guide","title":"User Guide","text":"using Logging\n\n# Package shows its messages, but Julia filters to only warnings+\nwith_logger(ConsoleLogger(stderr, Logging.Warn)) do\n    result = solve_problem(problem, verbose = true)\nend","category":"page"},{"location":"user_tutorial/","page":"User Guide","title":"User Guide","text":"This gives you both package-level control (what messages to generate) and system-level control (what messages to display).","category":"page"},{"location":"#SciMLLogging.jl","page":"Home","title":"SciMLLogging.jl","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"A verbosity control system for the SciML ecosystem that provides fine-grained control over logging and messaging in scientific computing workflows.","category":"page"},{"location":"#Features","page":"Home","title":"Features","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Fine-grained control: Control individual aspects of logging with specific verbosity settings\nType-safe interface: Leverage Julia's type system for compile-time safety  \nZero-cost abstraction: Disabled verbosity has no runtime overhead\nIntegration with Julia's logging: Built on top of Julia's standard logging infrastructure","category":"page"},{"location":"#Installation","page":"Home","title":"Installation","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"To install SciMLLogging, use the Julia package manager:","category":"page"},{"location":"","page":"Home","title":"Home","text":"using Pkg\nPkg.add(\"SciMLLogging\")","category":"page"},{"location":"#Citation","page":"Home","title":"Citation","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"If you use SciMLLogging.jl in your research, please cite the SciML organization:","category":"page"},{"location":"","page":"Home","title":"Home","text":"@misc{SciMLLogging,\n  author = {SciML},\n  title = {SciMLLogging.jl: Verbosity Control for Scientific Machine Learning},\n  url = {https://github.com/SciML/SciMLLogging.jl},\n  version = {v1.0.0},\n}","category":"page"},{"location":"#Getting-Started","page":"Home","title":"Getting Started","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"See the Tutorial for a quick introduction to using SciMLLogging.jl.","category":"page"},{"location":"#Contributing","page":"Home","title":"Contributing","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Please refer to the SciML ColPrac: Contributor's Guide on Collaborative Practices for Community Packages for guidance on PRs, issues, and other matters relating to contributing to SciML.\nSee the SciML Style Guide for common coding practices and other style decisions.\nThere are a few community forums for getting help and asking questions:\nThe #diffeq-bridged and #sciml-bridged channels in the Julia Slack\nThe #diffeq-bridged and #sciml-bridged channels in the Julia Zulip\nOn the Julia Discourse forums\nSee also SciML Community page","category":"page"},{"location":"#Reproducibility","page":"Home","title":"Reproducibility","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"<details><summary>The documentation of this SciML package was built using these direct dependencies,</summary>","category":"page"},{"location":"","page":"Home","title":"Home","text":"using Pkg # hide\nPkg.status() # hide","category":"page"},{"location":"","page":"Home","title":"Home","text":"</details>","category":"page"},{"location":"","page":"Home","title":"Home","text":"<details><summary>and using this machine and Julia version.</summary>","category":"page"},{"location":"","page":"Home","title":"Home","text":"using InteractiveUtils # hide\nversioninfo() # hide","category":"page"},{"location":"","page":"Home","title":"Home","text":"</details>","category":"page"},{"location":"","page":"Home","title":"Home","text":"<details><summary>A more complete overview of all dependencies and their versions is also provided.</summary>","category":"page"},{"location":"","page":"Home","title":"Home","text":"using Pkg # hide\nPkg.status(; mode = PKGMODE_MANIFEST) # hide","category":"page"},{"location":"","page":"Home","title":"Home","text":"</details>","category":"page"},{"location":"","page":"Home","title":"Home","text":"using TOML\nusing Markdown\nversion = TOML.parse(read(\"../../Project.toml\", String))[\"version\"]\nname = TOML.parse(read(\"../../Project.toml\", String))[\"name\"]\nlink_manifest = \"https://github.com/SciML/\" * name * \".jl/tree/gh-pages/v\" * version *\n                \"/assets/Manifest.toml\"\nlink_project = \"https://github.com/SciML/\" * name * \".jl/tree/gh-pages/v\" * version *\n               \"/assets/Project.toml\"\nMarkdown.parse(\"\"\"You can also download the\n[manifest]($link_manifest)\nfile and the\n[project]($link_project)\nfile.\n\"\"\")","category":"page"},{"location":"tutorial/#Tutorial","page":"Complete Examples","title":"Tutorial","text":"","category":"section"},{"location":"tutorial/","page":"Complete Examples","title":"Complete Examples","text":"This tutorial demonstrates how to use SciMLLogging.jl to add verbosity control to your Julia packages.","category":"page"},{"location":"tutorial/#Basic-Concepts","page":"Complete Examples","title":"Basic Concepts","text":"","category":"section"},{"location":"tutorial/","page":"Complete Examples","title":"Complete Examples","text":"SciMLLogging.jl provides three main components:","category":"page"},{"location":"tutorial/","page":"Complete Examples","title":"Complete Examples","text":"Verbosity - A sum type representing different verbosity levels\nAbstractVerbositySpecifier{T} - Base type for custom verbosity types\n@SciMLMessage - Macro for emitting messages based on verbosity settings","category":"page"},{"location":"tutorial/#Creating-a-Verbosity-System","page":"Complete Examples","title":"Creating a Verbosity System","text":"","category":"section"},{"location":"tutorial/#Step-1:-Create-Your-Verbosity-Type","page":"Complete Examples","title":"Step 1: Create Your Verbosity Type","text":"","category":"section"},{"location":"tutorial/","page":"Complete Examples","title":"Complete Examples","text":"Define a type that inherits from AbstractVerbositySpecifier{T} with verbosity level fields:","category":"page"},{"location":"tutorial/","page":"Complete Examples","title":"Complete Examples","text":"using SciMLLogging\nusing Logging\n\nstruct MyVerbosity{T} <: AbstractVerbositySpecifier{T}\n    startup::MessageLevel\n    progress::MessageLevel\n    warnings::MessageLevel\n\n    function MyVerbosity{T}(;\n        startup = InfoLevel(),\n        progress = Silent(),\n        warnings = WarnLevel()\n    ) where T\n        new{T}(startup, progress, warnings)\n    end\nend\nnothing # hide","category":"page"},{"location":"tutorial/","page":"Complete Examples","title":"Complete Examples","text":"The type parameter T determines whether verbosity is enabled:","category":"page"},{"location":"tutorial/","page":"Complete Examples","title":"Complete Examples","text":"T = true: Messages will be processed\nT = false: No runtime overhead (compiled away)","category":"page"},{"location":"tutorial/#Step-2:-Use-the-Verbosity-System","page":"Complete Examples","title":"Step 2: Use the Verbosity System","text":"","category":"section"},{"location":"tutorial/","page":"Complete Examples","title":"Complete Examples","text":"# Create an enabled verbosity instance\nverbose = MyVerbosity{true}()\n\n# Emit messages at different levels\n@SciMLMessage(\"Application starting...\", verbose, :startup)\n@SciMLMessage(\"Processing item 1/100\", verbose, :progress)\n@SciMLMessage(\"Memory usage high\", verbose, :warnings)\nnothing # hide","category":"page"},{"location":"tutorial/#Verbosity-Levels","page":"Complete Examples","title":"Verbosity Levels","text":"","category":"section"},{"location":"tutorial/","page":"Complete Examples","title":"Complete Examples","text":"SciMLLogging provides several built-in verbosity levels:","category":"page"},{"location":"tutorial/","page":"Complete Examples","title":"Complete Examples","text":"using SciMLLogging\n\nSilent()  # No output\nInfoLevel()    # Informational messages\nWarnLevel()    # Warning messages\nErrorLevel()   # Error messages\nCustomLevel(-1000)  # Custom log level with integer n","category":"page"},{"location":"tutorial/#Dynamic-Messages","page":"Complete Examples","title":"Dynamic Messages","text":"","category":"section"},{"location":"tutorial/","page":"Complete Examples","title":"Complete Examples","text":"Use functions for lazy evaluation of expensive message generation:","category":"page"},{"location":"tutorial/","page":"Complete Examples","title":"Complete Examples","text":"using SciMLLogging\nusing Logging\n\n# Define the verbosity system (same as before)\nstruct MyVerbosity2{T} <: AbstractVerbositySpecifier{T}\n    progress::MessageLevel\n\n    MyVerbosity2{T}(progress = SciMLLogging.InfoLevel()) where T = new{T}(progress)\nend\n\nverbose = MyVerbosity2{true}()\n\n# Variables from surrounding scope\niter = 5\ntotal = 100\n\n@SciMLMessage(verbose, :progress) do\n    percentage = iter / total * 100\n    \"Progress: $iter/$total ($(round(percentage, digits=1))%)\"\nend\nnothing # hide","category":"page"},{"location":"tutorial/","page":"Complete Examples","title":"Complete Examples","text":"The function is only evaluated if the message will actually be emitted.","category":"page"},{"location":"tutorial/#Disabling-Verbosity","page":"Complete Examples","title":"Disabling Verbosity","text":"","category":"section"},{"location":"tutorial/","page":"Complete Examples","title":"Complete Examples","text":"For zero runtime cost when disabled:","category":"page"},{"location":"tutorial/","page":"Complete Examples","title":"Complete Examples","text":"using SciMLLogging\nusing Logging\n\nstruct MyVerbosity3{T} <: AbstractVerbositySpecifier{T}\n    startup::MessageLevel\n\n    MyVerbosity3{T}(startup = InfoLevel()) where T = new{T}(startup)\nend\n\n# Disabled verbosity\nsilent = MyVerbosity3{false}()\n\n# This compiles to nothing - no runtime overhead\n@SciMLMessage(\"This won't be shown\", silent, :startup)\nprintln(\"Message was not shown because verbosity is disabled\")","category":"page"},{"location":"tutorial/#Utility-Functions","page":"Complete Examples","title":"Utility Functions","text":"","category":"section"},{"location":"tutorial/#Converting-to-Integer","page":"Complete Examples","title":"Converting to Integer","text":"","category":"section"},{"location":"tutorial/","page":"Complete Examples","title":"Complete Examples","text":"For compatibility with packages using integer verbosity levels:","category":"page"},{"location":"tutorial/","page":"Complete Examples","title":"Complete Examples","text":"using SciMLLogging\n\nlevel = verbosity_to_int(WarnLevel())  # Returns 2","category":"page"},{"location":"tutorial/#Converting-to-Boolean","page":"Complete Examples","title":"Converting to Boolean","text":"","category":"section"},{"location":"tutorial/","page":"Complete Examples","title":"Complete Examples","text":"For packages using boolean verbosity flags:","category":"page"},{"location":"tutorial/","page":"Complete Examples","title":"Complete Examples","text":"using SciMLLogging\n\nis_verbose = verbosity_to_bool(InfoLevel())  # Returns true\nprintln(\"SciMLLogging.InfoLevel() converts to: $is_verbose\")\n\nis_verbose = verbosity_to_bool(Silent())  # Returns false\nprintln(\"SciMLLogging.Silent() converts to: $is_verbose\")","category":"page"},{"location":"tutorial/#Custom-Logger","page":"Complete Examples","title":"Custom Logger","text":"","category":"section"},{"location":"tutorial/","page":"Complete Examples","title":"Complete Examples","text":"Route messages to different destinations:","category":"page"},{"location":"tutorial/","page":"Complete Examples","title":"Complete Examples","text":"using SciMLLogging\nusing Logging\n\n# Create a logger that sends warnings and errors to files\nlogger = SciMLLogger(\n    info_repl = true,\n    warn_repl = true,\n    error_repl = true,\n    warn_file = \"warnings.log\",\n    error_file = \"errors.log\"\n)\n\n# Define a simple verbosity system for testing\nstruct LoggerTestVerbosity{T} <: AbstractVerbositySpecifier{T}\n    test::MessageLevel\n\n    LoggerTestVerbosity{T}(test = WarnLevel()) where T = new{T}(test)\nend\n\nverbose = LoggerTestVerbosity{true}()\n\n# Use the logger\nwith_logger(logger) do\n    @SciMLMessage(\"This warning is logged\", verbose, :test)\nend\n\n# Clean up\nisfile(\"warnings.log\") && rm(\"warnings.log\")\nisfile(\"errors.log\") && rm(\"errors.log\")\nnothing # hide","category":"page"},{"location":"tutorial/#Complete-Example","page":"Complete Examples","title":"Complete Example","text":"","category":"section"},{"location":"tutorial/","page":"Complete Examples","title":"Complete Examples","text":"Here's a complete example showing a solver with verbosity:","category":"page"},{"location":"tutorial/","page":"Complete Examples","title":"Complete Examples","text":"using SciMLLogging\nusing Logging\nusing Random\nRandom.seed!(123) # For reproducibility\n\n# Create verbosity type\nstruct SolverVerbosity{T} <: AbstractVerbositySpecifier{T}\n    initialization::MessageLevel\n    iterations::MessageLevel\n    convergence::MessageLevel\n\n    function SolverVerbosity{T}(;\n        initialization = InfoLevel(),\n        iterations = Silent(),\n        convergence = InfoLevel()\n    ) where T\n        new{T}(initialization, iterations, convergence)\n    end\nend\n\n# Solver function\nfunction my_solver(problem, verbose::SolverVerbosity)\n    @SciMLMessage(\"Initializing solver...\", verbose, :initialization)\n    \n    for i in 1:100\n        # Do iteration work...\n        \n        @SciMLMessage(verbose, :iterations) do\n            \"Iteration $i: residual = $(round(rand(), digits=4))\"\n        end\n        \n        if rand() < 0.05  # Converged (5% chance per iteration for demo)\n            @SciMLMessage(\"Converged at iteration $i\", verbose, :convergence)\n            return i\n        end\n    end\n    @SciMLMessage(\"Failed to converge\", verbose, :convergence)\n    return nothing\nend\n\n# Use the solver with verbosity\nprintln(\"Running solver with verbosity enabled:\")\nverbose = SolverVerbosity{true}()\nresult = my_solver(\"problem\", verbose)\nprintln(\"Solver returned: $result\")\n\nprintln(\"\\nRunning solver in silent mode:\")\n# Or with silent mode\nsilent = SolverVerbosity{false}()\nresult = my_solver(\"problem\", silent)  # No output\nprintln(\"Solver returned: $result (no messages shown)\")","category":"page"},{"location":"tutorial/#Testing-with-Verbosity","page":"Complete Examples","title":"Testing with Verbosity","text":"","category":"section"},{"location":"tutorial/","page":"Complete Examples","title":"Complete Examples","text":"When testing code that uses SciMLLogging:","category":"page"},{"location":"tutorial/","page":"Complete Examples","title":"Complete Examples","text":"using SciMLLogging\nusing Logging\nusing Test\n\n# Define a simple verbosity system for testing\nstruct TestVerbosity{T} <: AbstractVerbositySpecifier{T}\n    level::MessageLevel\n\n    TestVerbosity{T}(level = InfoLevel()) where T = new{T}(level)\nend\n\n@testset \"Verbosity Tests\" begin\n    verbose = TestVerbosity{true}()\n\n    # Test that message is logged at correct level\n    @test_logs (:info, \"Test message\") begin\n        @SciMLMessage(\"Test message\", verbose, :level)\n    end\n\n    # Test that disabled verbosity produces no output\n    silent = TestVerbosity{false}()\n    @test_logs min_level=Logging.Debug begin\n        @SciMLMessage(\"Should not appear\", silent, :level)\n    end\nend","category":"page"}]
}
